generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  hashedPassword String
  username       String    @unique @db.VarChar(255)
  displayName    String?
  profileImage   String?
  bio            String?
  location       String?
  latitude       Float?
  longitude      Float?
  lastOnline     DateTime? @updatedAt
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Profile fields
  age                Int?
  gender             String?
  interests          String[] // Array of interests or hobbies
  lookingFor         String[] // Array of what the user is looking for (e.g., "friendship", "relationship")
  relationshipStatus String?

  // Relationships
  photos        Photo[]
  preferences   Preferences?
  chats         Chat[]
  blockedUsers  Block[]      @relation("Blocker") // Users that this user has blocked
  blockingUsers Block[]      @relation("Blocked") // Users that have blocked this user
}

model Photo {
  id        String   @id @default(uuid())
  userId    String
  url       String
  isProfile Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Preferences {
  id       String @id @default(uuid())
  userId   String @unique
  showMe   String // Could be 'Everyone', 'Men', 'Women', etc.
  ageRange String // Could be a range like '18-30'
  distance Int // Max distance in kilometers or miles
  user     User   @relation(fields: [userId], references: [id])
}

model Chat {
  id        String   @id @default(uuid())
  userId    String
  message   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Block {
  id        String   @id @default(uuid())
  blockerId String
  blockedId String
  createdAt DateTime @default(now())
  blocker   User     @relation(name: "Blocker", fields: [blockerId], references: [id])
  blocked   User     @relation(name: "Blocked", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId]) // Ensure that each blocking relationship is unique
}
